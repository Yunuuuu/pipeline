% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-step.R
\name{step}
\alias{step}
\alias{create_step}
\alias{[[.step}
\alias{[[<-.step}
\alias{$.step}
\alias{$<-.step}
\alias{[.step}
\alias{[<-.step}
\title{Build a \code{step} object}
\usage{
step(id, expr, deps = NULL, finished = FALSE, bind = TRUE, seed = FALSE, ...)

create_step(
  id,
  expr,
  deps = NULL,
  finished = FALSE,
  bind = TRUE,
  seed = FALSE,
  ...
)

\method{[[}{step}(x, i)

\method{[[}{step}(x, i) <- value

\method{$}{step}(x, i)

\method{$}{step}(x, i) <- value

\method{[}{step}(x, i)

\method{[}{step}(x, i) <- value
}
\arguments{
\item{id}{A scalar character indicates the identification of the step. Must
be unique across the \code{step_tree}.}

\item{expr}{The expression define the command to run. Expression includes
symbols, function calls, scalar atomic objects and NULL (Non-standard ASTs
are also regarded as expression). Function \code{step} will use
<\code{\link[rlang:enquo]{rlang::enquo()}}> to defuse this argument. Details see
\link[rlang:is_expression]{is_expression} and \link[rlang:is_call]{is_call}}

\item{deps}{A character vector or \code{NULL} defines the upstream steps to run
before runing this step. \code{NULL} means no dependencies.}

\item{finished}{A scalar \code{logical} indicates whether this step has been
evaluated.}

\item{bind}{A scalar \code{logical} indicates whether to keep the returned value
(bind the symbol named with the step id to the result in the pipeline
internal environment). if \code{FALSE}, the result evaluated from \code{expr} won't be
kept. The evaluation of the step expression in the pipeline will always
return \code{NULL}.}

\item{seed}{A scalar \code{logical} or \code{numeric}. a \code{logical} value indicates
whether to set seed when evaluated the "expression". if \code{TRUE}, the
expression is evaluated with a seed (based on the hash of the expression
object).  Otherwise, the expression is evaluated without seed. if \code{numeric},
seed will be set by \code{set.seed(as.integer(seed))}.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> named values, other items to
extend \code{step} object.}

\item{x}{A \code{step} object from which to extract element(s) or in which to
replace element(s).}

\item{i}{The indices specifying elements to extract or replace}

\item{value}{The value to replace with.}
}
\value{
A \code{step} object.
}
\description{
A \code{step} object define the command to run in the pipeline.

Both \code{step} and \code{create_step} do the same thing, except that \code{step} function
also defuse the \code{expression} argument as a quosure.
}

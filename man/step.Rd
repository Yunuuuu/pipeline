% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-step.R
\name{step}
\alias{step}
\alias{new_step}
\alias{[[.step}
\alias{[[<-.step}
\alias{$.step}
\alias{$<-.step}
\alias{[.step}
\alias{[<-.step}
\title{Build a \code{step} object}
\usage{
step(id, call, deps = NULL, finished = FALSE, return = TRUE, seed = FALSE, ...)

new_step(
  id,
  call,
  deps = NULL,
  finished = FALSE,
  return = TRUE,
  seed = FALSE,
  ...
)

\method{[[}{step}(x, i)

\method{[[}{step}(x, i) <- value

\method{$}{step}(x, i)

\method{$}{step}(x, i) <- value

\method{[}{step}(x, i)

\method{[}{step}(x, i) <- value
}
\arguments{
\item{id}{A scalar character indicates the identification of the step. Must
be unique across the \code{step_tree}.}

\item{call}{The command to run. Notes: this will be enclosed by
<\code{\link[rlang:enquo]{rlang::enquo()}}> to bundle the environment of users. If you use the step
in another environment other than the current environment. You should use
\link{new_step} or quote the expression firstly then use
<\code{\link[rlang:injection-operator]{!!}}> to inject the call expression in \link{step}.}

\item{deps}{A character vector or \code{NULL} defines the upstream steps to run
before runing this step. \code{NULL} means no dependencies.}

\item{finished}{A scalar \code{logical} indicates whether this step has been
evaluated.}

\item{return}{A scalar \code{logical} indicates whether to keep the returned
value. if \code{FALSE}, the result evaluated from \code{call} won't be kept.}

\item{seed}{A scalar \code{logical} or \code{numeric}. a \code{logical} value indicates
whether to set seed when evaluated the expression in "call". if \code{TRUE}, the
call is evaluated with a seed (based on the hash of the call object).
Otherwise, the call is evaluated without seed. if \code{numeric}, seed will be set
by \code{set.seed(as.integer(seed))}.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> Other items to extend \code{step}
object.}

\item{x}{A \code{step} object from which to extract element(s) or in which to
replace element(s).}

\item{i}{The indices specifying elements to extract or replace}

\item{value}{The value to replace, \code{NULL} will be kept in the step object.
use \code{zap()} to remove a component in the step.}
}
\value{
A \code{step} object.
}
\description{
A \code{step} object define the command to run in the pipeline.
\itemize{
\item step: user-friendly helper
\item new_step: low-level constructor
}
}
